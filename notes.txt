1.python -m venv my_env
2. ./my_env/Scripts/activate.bat
3.pip freeze > requirements.txt
4.pip install -r requirements.txt.
5.django-admin startproject mysite
6.python manage.py migrate
7.python manage.py startapp blog
8.Когда структура приложения готова, можно приступать к разработке мо-
делей данных блога.
9.Теперь, когда модель Post синхронизирована с базой данных, можно создать
простой сайт администрирования, чтобы управлять постами блога
10.python manage.py createsuperuser
11.Добавление моделей на сайт администрирования
12.Сначала в своем приложении нужно создать функции-представления, за-
тем по каждому представлению сформировать шаблон URL-адреса и, нако-
нец, создать шаблоны HTML, чтобы прорисовывать сгенерированные пред-
ставлениями данные. Каждое представление будет прорисовывать шаблон,
передавая ему переменные, и возвращать HTTP-ответ с прорисованным ре-
зультатом.
13.информации о посте.
Django обладает мощным языком шаблонов, который позволяет указывать
внешний вид отображения данных. Он основан на шаблонных тегах, шаблон-
ных переменных и шаблонных фильтрах1:
• шаблонные теги управляют прорисовкой шаблона и выглядят как {%
tag %};
• шаблонные переменные заменяются значениями при прорисовке шаб-
лона и выглядят как {{ variable }};
• шаблонные фильтры позволяют видоизменять отображаемые перемен-
ные и выглядят как {{ variable|filter }}.
14.
15.
16.
17.
18.
19.
20.

